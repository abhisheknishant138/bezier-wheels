version: 1.0.{build}.{branch}

matrix:
  fast_finish: true

# We always use a 64-bit machine.
platform:
  - x64

environment:

  global:
    REPO_DIR: bezier
    BUILD_COMMIT: 56a275aac704f4b48166c390fbd044f5a98e3960
    BUILD_DEPENDS: "numpy"
    BEZIER_JOURNAL: "%APPVEYOR_BUILD_FOLDER%\\bezier\\journal.txt"
    BEZIER_WHEEL: "True"

    CMD_IN_ENV: "cmd /E:ON /V:ON /C %APPVEYOR_BUILD_FOLDER%\\bezier\\appveyor\\windows_py27_64bit.cmd"
    MINGW_32: C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32\bin
    MINGW_64: C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64\bin

  matrix:

    # See: https://www.appveyor.com/docs/installed-software/#python

    - PYTHON: "C:\\Python27"
    - PYTHON: "C:\\Python27-x64"
      NEEDS_CMD_IN_ENV: "True"
    - PYTHON: "C:\\Python36"
    - PYTHON: "C:\\Python36-x64"
    - PYTHON: "C:\\Python37"
    - PYTHON: "C:\\Python37-x64"

install:
  # Fetch submodules
  - git submodule update --init --recursive

  - cmd: echo "Filesystem root:"
  - dir C:\

  - echo "Installed SDKs:"
  - dir "C:/Program Files/Microsoft SDKs/Windows"

  # Prepend "current" Python to the PATH of this build.
  - SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%

  # Append MinGW to the PATH of this build so ``gfortran`` is visible
  # to ``numpy.distutils``.
  - ps: |
      $PYTHON = $env:PYTHON
      If ($PYTHON.EndsWith("-x64")) {
          $MINGW = $env:MINGW_64
      } Else {
          $MINGW = $env:MINGW_32
      }
      $env:Path += ";$MINGW"

  # Check that we have the expected version and architecture for Python
  - python --version
  - python -c "import struct; print(struct.calcsize('P') * 8)"
  - python -c "import os; print(os.name)"
  - python -c "import sys; print(sys.platform); print(sys.version)"

  # Packaging requirements
  # Pin wheel to 0.26.0 to avoid Windows ABI tag for built wheel
  # For context: https://github.com/pypa/wheel/issues/161 and
  #              https://github.com/pypa/wheel/issues/171
  - python -m pip install --upgrade pip setuptools virtualenv
  - python -m pip install "wheel==0.26.0"

  # Install the build dependencies of the project.
  - python -m pip install --upgrade %BUILD_DEPENDS%

build_script:
  # build wheel:
  - cd %REPO_DIR%
  - git checkout %BUILD_COMMIT%

  - cmd: |
      IF "%NEEDS_CMD_IN_ENV%" == "True" (
        "%CMD_IN_ENV% python setup.py bdist_wheel"
      ) ELSE (
        python setup.py bdist_wheel"
      )

  - ps: |
      # Upload artifact to Appveyor immediately after build
      ls dist -r | Foreach-Object {
          appveyor PushArtifact $_.FullName
      }

test_script:
  # Assumes `cd %REPO_DIR%` was called previously.
  - python -m virtualenv test-venv
  - test-venv\Scripts\pip install --requirement scripts\requirements.txt
  - test-venv\Scripts\pip install bezier --no-index --find-links dist
  - test-venv\Scripts\python -c "import bezier; print(bezier._HAS_SPEEDUP)"
  - test-venv\Scripts\py.test tests\unit
  - test-venv\Scripts\python -c "from bezier import _speedup; print(_speedup)"

artifacts:
  - path: "bezier\\journal.txt"

on_failure:
  # Assumes `cd %REPO_DIR%` was called previously.
  - appveyor PushArtifact "journal.txt"
