---
version: 1.0.{build}.{branch}

matrix:
  fast_finish: true

# We always use a 64-bit machine.
platform:
  - x64

environment:

  global:
    REPO_DIR: bezier
    PACKAGE_NAME: bezier
    BUILD_COMMIT: 1ae147f81e7a01ba672806a8fd56de25ba2bdcdb
    BUILD_DEPENDS: "numpy"
    TEST_DEPENDS:
      '--requirement %APPVEYOR_BUILD_FOLDER%\bezier\scripts\requirements.txt'
    BEZIER_JOURNAL: '%APPVEYOR_BUILD_FOLDER%\bezier\journal.txt'
    BEZIER_WHEEL: "True"

    MINGW_32: C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32\bin
    MINGW_64: C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64\bin

    DECRYPT_KEY_JSON:
      secure: vfomU73c6HFaEH+xcMV//mzfo08Hbai/hC0lr9dkTZpGpex8eb+ih/HBiQo++HNZ
              E8q3Je7WQr52J8VkcpWJF/04Sf90rs9xkHURU4QopkQ=
    GOOGLE_CLOUD_PROJECT:
      secure: xU2pL9SsQbToiL2jefnnSQ==
    GCS_BUCKET:
      secure: y5DEJ/24uX4RcZ+oOT/LuNByYWYiqIn1g8zEoNFIltk=

  matrix:

    # See: https://www.appveyor.com/docs/installed-software/#python

    - PYTHON: 'C:\Python27'
    - PYTHON: 'C:\Python27-x64'
    - PYTHON: 'C:\Python36'
    - PYTHON: 'C:\Python36-x64'
    - PYTHON: 'C:\Python37'
    - PYTHON: 'C:\Python37-x64'

install:
  # Fetch submodules
  - git submodule update --init --recursive

  # Prepend "current" Python to the PATH of this build.
  - SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%

  # Append MinGW to the PATH of this build so ``gfortran`` is visible
  # to ``numpy.distutils``.
  - ps: |
      $PYTHON = $env:PYTHON
      If ($PYTHON.EndsWith("-x64")) {
          $MINGW = $env:MINGW_64
      } Else {
          $MINGW = $env:MINGW_32
      }
      $env:Path += ";$MINGW"

  # Check that we have the expected version and architecture for Python.
  - python %APPVEYOR_BUILD_FOLDER%\appveyor\env_info.py

  # Packaging requirements
  # Pin wheel to 0.26.0 to avoid Windows ABI tag for built wheel
  # For context: https://github.com/pypa/wheel/issues/161 and
  #              https://github.com/pypa/wheel/issues/171
  - python -m pip install --upgrade pip setuptools virtualenv
  - python -m pip install "wheel==0.26.0"

  # Install the build dependencies of the project.
  - python -m pip install --upgrade %BUILD_DEPENDS%

build_script:
  # Make sure the project is checked out at the correct commit:
  - cd %REPO_DIR%
  - git checkout %BUILD_COMMIT%
  - cd %APPVEYOR_BUILD_FOLDER%

  # Build wheel:
  - '%APPVEYOR_BUILD_FOLDER%\appveyor\build_wheel.cmd'

test_script:
  - python -m virtualenv test-venv

  # Install test dependencies.
  - test-venv\Scripts\pip install %TEST_DEPENDS%

  # Install package from local built wheel.
  - test-venv\Scripts\pip install
      --no-index
      --find-links %APPVEYOR_BUILD_FOLDER%\wheelhouse
      %PACKAGE_NAME%

  # Verify speedups are built.
  - test-venv\Scripts\python %APPVEYOR_BUILD_FOLDER%\appveyor\check_speedup.py

  # Run unit and functional tests.
  - test-venv\Scripts\py.test %APPVEYOR_BUILD_FOLDER%\bezier\tests\unit
  - test-venv\Scripts\py.test %APPVEYOR_BUILD_FOLDER%\bezier\tests\functional

artifacts:
  - path: 'bezier\journal.txt'

on_success:
  # Make a Python 2.7 virtual environment for `gsutil`
  - C:\Python27-x64\Python.exe -m pip install --upgrade pip virtualenv
  - C:\Python27-x64\Python.exe -m virtualenv gsutil-env
  - gsutil-env\Scripts\pip install gsutil

  # Set up the `boto` configuration for `gsutil`. BOTO_CONFIG must be set
  # before calling `populate_boto.py`
  - SET BOTO_CONFIG=%APPVEYOR_BUILD_FOLDER%\.boto
  - gsutil-env\Scripts\python %APPVEYOR_BUILD_FOLDER%\populate_boto.py

  # Decrypt `key.json` for use to upload to GCS.
  - ps: '%APPVEYOR_BUILD_FOLDER%\appveyor\install-secure-file.ps1'
  - appveyor-tools\secure-file
      -decrypt %APPVEYOR_BUILD_FOLDER%\appveyor\key.json.enc
      -secret %DECRYPT_KEY_JSON%
      -out %APPVEYOR_BUILD_FOLDER%\key.json

  # Upload the wheel to GCS.
  - gsutil-env\Scripts\gsutil cp
      %APPVEYOR_BUILD_FOLDER%\wheelhouse\%PACKAGE_NAME%*.whl
      gs://%GCS_BUCKET%

cache:
  # Use the appveyor cache to avoid re-downloading large archives.
  - '%APPDATA%\pip\Cache'
